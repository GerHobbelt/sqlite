# 2018 February 15
#
# The author disclaims copyright to this source code.  In place of
# a legal notice, here is a blessing:
#
#    May you do good and not evil.
#    May you find forgiveness for yourself and forgive others.
#    May you share freely, never taking more than you give.
#
#***********************************************************************
# This file implements regression tests for SQLite library. The focus
# of this file is the sqlite3_replication_xxx() APIs.
#

set testdir [file dirname $argv0]
source $testdir/tester.tcl
ifcapable !replication {finish_test; return}
set testprefix replication

# Configure SQLite with the test replication implementation and create
# a test database in WAL mode.
#
proc reset_replication {} {
  catch {db close}
  sqlite3_shutdown
  sqlite3_config_test_replication 1
  reset_db
  execsql {
    PRAGMA journal_mode = WAL;
  }
}

#-------------------------------------------------------------------------
# The following block of tests - wal-1.* - focus on testing the
# implementation of the sqlite3_replication_mode() interface.

# Test that an error is returned if the database is not in WAL mode.
#
do_test 1.0 {
  execsql {
    PRAGMA journal_mode = DELETE;
  }
  list [catch {sqlite3_replication_mode db main} msg] $msg
} {1 SQLITE_ERROR}

# Test that an error is returned if the given schema name does not exist.
#
do_test 1.1 {
  list [catch {sqlite3_replication_mode db garbage} msg] $msg
} {1 SQLITE_ERROR}

# Test that by default no write-ahead log replication is setup.
#
do_test 1.2 {
  reset_replication
  sqlite3_replication_mode db main
} {SQLITE_REPLICATION_NONE}

#-------------------------------------------------------------------------
# The following block of tests - wal-2.* - focus on testing the
# implementation of the sqlite3_replication_leader() interface.

# Test that an error is returned if the database is not in WAL mode.
#
do_test 2.0 {
  execsql {
    PRAGMA journal_mode = DELETE;
  }
  list [catch {sqlite3_replication_leader db main} msg] $msg
} {1 SQLITE_ERROR}

# Test that an error is returned if the given schema name is invalid.
#
do_test 2.1 {
  reset_replication
  list [catch {sqlite3_replication_leader db garbage} msg] $msg
} {1 SQLITE_ERROR}

# Test that trying to enable leader replication twice for the same
# database results in an error.
#
do_test 2.2 {
  reset_replication
  sqlite3_replication_leader db main
  list [catch {sqlite3_replication_leader db main} msg] $msg
} {1 SQLITE_ERROR}

# Test that the replication mode value is set to
# SQLITE_REPLICATION_LEADER after a successful call.
#
do_test 2.3 {
  reset_replication
  sqlite3_replication_leader db main
  sqlite3_replication_mode db main
} {SQLITE_REPLICATION_LEADER}

# Reset the replication configuration for subsequent tests.
db close
sqlite3_shutdown
sqlite3_config_test_replication 0
sqlite3_initialize
autoinstall_test_functions

finish_test
